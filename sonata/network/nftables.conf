#!/usr/sbin/nft -f

flush ruleset

#define LAN_IF = { "bond0.??" } # 2-digit VLANs are lan, TODO: list actual
define LAN_IF = { "bond0.20", "bond0.30", "bond0.31", "bond0.40", "bond0.50", "bond0.60", "bond0.70", "bond0.80", "bond0.90", "bond0.95" } # 2-digit VLANs are lan, TODO: list actual

define NET_IF = { "bond0.372", "wg_marla", "bond0.666" }

define BGP_V4 = { 172.31.42.1, 172.31.42.2, 172.31.99.25 }
define BGP_V6 = { 2001:67c:21bc:7fff:f0f:fcf0:0:1, 2001:67c:21bc:7fff:f0f:fcf0:0:2, 2001:67c:21bc:7fff:9:1:1:1 }

# TODO: see which vlans will be deleted?
define of-ext          = { "bond0.10", "bond0.372" }
define of-mgmt         = { "bond0.20" }
define of-clients      = { "bond0.70", "bond0.80" }
define of-video        = { "bond0.30", "bond0.31" }
define of-overflow     = { "bond0.90" }
define of-reception    = { "bond0.50" }
define of-phone        = { "bond0.60" }
define of-workshop     = { "bond0.40" }
define of-pos          = { "bond0.95" }
define devhex	       = { "bond0.666" }



table inet filter {
	chain input {
		type filter hook input priority filter; policy drop;

		iif lo accept
		
		# anti-klonootryazvane
		iifname $of-mgmt tcp dport ssh accept
		ip saddr $BGP_V4 tcp dport ssh accept
		iifname $of-ext tcp dport ssh accept
		iifname $devhex tcp dport ssh accept
		ct state established,related accept

                # Don't block ICMP; TODO: we can choose only subtypes
		# (NDP, echo, frag needed, ...)
                ip protocol icmp accept
                ip6 nexthdr icmpv6 accept
                meta l4proto ipv6-icmp accept

		# BGP, BFD
		ip  saddr $BGP_V4 tcp dport bgp accept
		ip6 saddr $BGP_V6 tcp dport bgp accept
                ip  saddr $BGP_V4 udp dport { 3784, 3785 } accept
                ip6 saddr $BGP_V6 udp dport { 3784, 3785 } accept

		# wg-marla
		ip  saddr 185.117.82.66 tcp dport 32111 accept

		#vlan666
		
		
		# voip
		ip saddr 10.60.0.0/24 udp dport 5060 accept
		ip saddr 10.60.0.0/24 udp dport 10000-20000 accept
		ip saddr 91.212.183.55/32 udp dport 5060 accept
		ip saddr 91.212.183.0/24 udp dport 10000-20000 accept
		ip saddr 91.223.233.0/24 udp dport 10000-20000 accept

		ip daddr 94.26.19.12/32 udp dport 5060 accept
		ip daddr 94.26.19.12/32 udp dport 10000-20000 accept

		# web stuffs
		iifname  $LAN_IF tcp dport { 80, 443 }  accept
		udp dport 443 accept # TODO: QUIC, do we use?

		# DNS, TODO: may remove tcp
		iifname $LAN_IF tcp dport domain accept
		iifname $LAN_IF udp dport domain accept

                # DHCP
                iifname $LAN_IF udp dport { bootps, bootpc } accept

		# NTP
                iifname $LAN_IF udp dport ntp accept

		# syslog; TODO: check if more vlans are needed
		iifname $of-mgmt udp dport syslog accept

		# wifi provisioning
		iifname $of-mgmt tcp dport 34925 accept

		# TODO: asterisk

		# send tcp reset instead of icmp unreachable
                ip protocol tcp reject with tcp reset
                ip6 nexthdr tcp reject with tcp reset
                reject # icmp unreachable instead of drop for udp, can be removed
		
	}
	chain forward {
		type filter hook forward priority filter; policy drop; #drop;

		ct state established,related accept

		# TODO: do we need to send email from lan?
		iifname $LAN_IF tcp dport 25 reject with tcp reset

		# TODO: does everyone get internet?
		iifname $LAN_IF oifname $NET_IF accept

		iifname $of-mgmt accept
		
		iifname $of-video oifname $of-video accept
		

		# send tcp reset instead of icmp unreachable
                ip protocol tcp reject with tcp reset
                ip6 nexthdr tcp reject with tcp reset
                reject # icmp unreachable instead of drop for udp, can be removed
	}
	chain output {
		type filter hook output priority filter;
	}
}

table ip nat {
	chain postrouting {
                type nat hook postrouting priority 100; policy accept;

		# tmp: devhex office
#		iifname $LAN_IF oifname "bond0.666" masquerade

		# TODO: block uplink-sw, maybe drop all RFC1918?
		iifname $LAN_IF oifname $NET_IF snat 185.117.82.241
	}
}
